class Solution {
public:
    int reverse(int x) {
        stack<int> n;
        double rev=0;
        long tens=1;
        while(x!=0)
        {
            n.push(x%10);
            x=x/10;
        }
        while(!n.empty())
        {
           rev=n.top()*tens+rev;
           tens=tens*10;
            n.pop();
        }
        if(rev>pow(2,31) || rev<(pow(-2,31)-1))
            return 0;
        else return rev;
    }
};

//Adding a solution with 0 ms time complexity


class Solution {
public:
    int reverse(int x) {
        int rev=0;
        while(x!=0){
            int pop = x % 10;
            x /= 10;
            if(rev>INT_MAX/10 || (rev == INT_MAX/10 && pop>7))
                return 0;
            if(rev<INT_MIN/10 || (rev == INT_MIN/10  && pop<-8))
                return 0;
            rev= rev*10+pop;
        }
        return rev;
    }
    
};
